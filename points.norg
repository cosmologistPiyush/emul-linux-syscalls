@document.meta
	title: Things to Remember
	author: Piyush Sachdeva
	categories: work
@end

*** Kernel routines
@code norg
	- All file operations in sys/filedesc.h.
	- struct file and related in sys/file.h.
	- see sys_pipe.c for info regarding pipe(2) implementation.
	- Linux is compat_43.
	- `struct vfs` is `struct mount` in mount.h?
@end

* Implementation:
@code norg
	- [ ] Check for size of file and offset. If `offset > filesize` then ERROR
	- [ ] FOF_UPDATE_OFFSET flag from sys/file.h and sys_read() for splice.
	- [ ] Check the vnode flag variable for fd_in if it can be memory mapped (for splice).
	- [ ] nulify spliceops if statically allocated and not filled by the use in
	  the user-space itself.
@end

*** Questions:
@code norg
	- Looked the code for \`/bin/cp`\. It used mmap(2) and write(2). Same for our implementation?
	  Ans- no mmap in Kernel
	- `struct vfs` is `struct mount` in mount.h?
	  Ans- Yes
	- Where to call fo_seek() in custom do_splice[read | write]() or dosplice()
@end

*** Code:
@code c
	struct sf_hdtr {
		struct iovec *hd;
		size_t hdlen;
		struct iovec *tr;
		size_t trlen;
	};

	struct sendfile_args {
		struct sf_hdtr *hdtr;
	};

	struct splice_args {
		off_t off_out;
		unsigned int flags;
	};

	enum action { SPLICE, SENDFILE };

	struct spliceops {
		enum action choice;

		union {
			struct splice_args *spargs;
			struct sendfile_args *sfargs;
		} op;
	};

	ssize_t splicev(int fd_in, int off_in, int fd_out, size_t len,
					 struct spliceops ops[], size_t count) {
		/* flow of the function */

		/*
		 * get a fp_in & fp_out (pointer to struct file) for fd_in & fd_out;
		 * make sure off_in is less than the size of the file and not 0;
		 *
		*/
	}

 @end
